diff --git a/QGNSS.pro b/QGNSS.pro
index c052751..3f7442f 100644
--- a/QGNSS.pro
+++ b/QGNSS.pro
@@ -1,5 +1,7 @@
 TEMPLATE = subdirs
 
+QT += gui widgets uiplugin
+
 SUBDIRS += \
     QGNSS\
     QGNSSLog \
diff --git a/QGNSS/DataParser/nmea_parser.cpp b/QGNSS/DataParser/nmea_parser.cpp
index 2f4f37e..6281c2d 100644
--- a/QGNSS/DataParser/nmea_parser.cpp
+++ b/QGNSS/DataParser/nmea_parser.cpp
@@ -3,6 +3,8 @@
 #include "common.h"
 #include "mainwindow.h"
 
+#define strcpy_s strcpy
+
 NMEA_Parser::NMEA_Parser(QObject *parent, NMEA_t *Nt) : QObject(parent)
 {
     this->Nt = Nt;
diff --git a/QGNSS/SkyViewWidget.cpp b/QGNSS/SkyViewWidget.cpp
index 953cf79..07f8f35 100644
--- a/QGNSS/SkyViewWidget.cpp
+++ b/QGNSS/SkyViewWidget.cpp
@@ -1,6 +1,7 @@
 #include "SkyViewWidget.h"
 #include "ui_SkyViewWidget.h"
 #include "RTKLib/rtklib.h"
+#include <QPainterPath>
 
 SkyViewWidget::SkyViewWidget(QWidget *parent) : QWidget(parent),
                                                 ui(new Ui::SkyViewWidget)
diff --git a/QGNSS/deviation_map.cpp b/QGNSS/deviation_map.cpp
index 4fa1037..f199fb7 100644
--- a/QGNSS/deviation_map.cpp
+++ b/QGNSS/deviation_map.cpp
@@ -63,7 +63,7 @@ Deviation_Map::Deviation_Map(QWidget *parent) : QWidget(parent),
     ui->customPlot->yAxis->setBasePen(QPen(Qt::NoPen));
     ui->customPlot->yAxis->setSubTickPen(QPen(Qt::NoPen));
     ui->customPlot->yAxis->setTickPen(QPen(Qt::NoPen));
-    ui->customPlot->axisRect(0)->setAutoMargins(false); // 去除边框
+    ui->customPlot->axisRect(0)->setAutoMargins(QCP::msNone); // 去除边框 JMF
 
     ui->widget_dis_scale->setTickSize(getMapScale());
 
diff --git a/QGNSS/device_info.cpp b/QGNSS/device_info.cpp
index 2def807..245c545 100644
--- a/QGNSS/device_info.cpp
+++ b/QGNSS/device_info.cpp
@@ -1,7 +1,7 @@
 #include "device_info.h"
 #include "ui_device_info.h"
 
-#include <windows.h>
+//#include <windows.h>
 #include <QDebug>
 #include <QCompleter>
 #include <QSerialPort>
@@ -182,8 +182,8 @@ void device_info::on_buttonBox_accepted()
 
 bool device_info::nativeEvent(const QByteArray &eventType, void *message, long *result)
 {
-    MSG* msg = reinterpret_cast<MSG*>(message);
-    if (msg->message == WM_DEVICECHANGE)
+//    MSG* msg = reinterpret_cast<MSG*>(message);
+//    if (msg->message == WM_DEVICECHANGE)
     {
         fillPortInfo();
 //        fillPortsParameters();
diff --git a/QGNSS/ntrip_clientdialog.cpp b/QGNSS/ntrip_clientdialog.cpp
index 5b96d71..a70db4c 100644
--- a/QGNSS/ntrip_clientdialog.cpp
+++ b/QGNSS/ntrip_clientdialog.cpp
@@ -9,6 +9,7 @@
 #include <QJsonObject>
 #include <QJsonDocument>
 #include <QMessageBox>
+#include <cmath>
 
 NTRIP_ClientDialog::NTRIP_ClientDialog(QWidget *parent) : QDialog(parent),
                                                           ui(new Ui::NTRIP_ClientDialog)
diff --git a/QGNSS_BROM/Broadcom/broadcom_base.h b/QGNSS_BROM/Broadcom/broadcom_base.h
index 7d13a04..b2b1d1f 100644
--- a/QGNSS_BROM/Broadcom/broadcom_base.h
+++ b/QGNSS_BROM/Broadcom/broadcom_base.h
@@ -97,12 +97,12 @@ class QGNSS_BROM_EXPORT Broadcom_Base : public BROM_BASE
     char sNAK[3];
     int schunks;//16KB
     upgradeConstants(){
-      strcpy_s (&sFLASHER_IDENTIFIER[0],sizeof (char)*9,"B1557704");
-      strcpy_s (&sFLASHER_SYNC[0],sizeof (char)*9,"1C134251");
-      strcpy_s (&sDEVICE_START_COMMUNICATION[0],sizeof (char)*3,"A3");
-      strcpy_s (&sFLASHER_READY[0],sizeof (char)*3,"4A");
-      strcpy_s (&sACK[0],sizeof (char)*3,"CC");
-      strcpy_s (&sNAK[0],sizeof (char)*3,"DD");
+      strncpy (&sFLASHER_IDENTIFIER[0],"B1557704",sizeof (char)*9);
+      strncpy (&sFLASHER_SYNC[0],"1C134251",sizeof (char)*9);
+      strncpy (&sDEVICE_START_COMMUNICATION[0],"A3",sizeof (char)*3);
+      strncpy (&sFLASHER_READY[0],"4A",sizeof (char)*3);
+      strncpy (&sACK[0],"CC",sizeof (char)*3);
+      strncpy (&sNAK[0],"DD",sizeof (char)*3);
       schunks=16*1024;
     }
   }UpgradeConstants;
diff --git a/QGNSS_BROM/IO/ioserial.cpp b/QGNSS_BROM/IO/ioserial.cpp
index 185506e..c4c6d09 100644
--- a/QGNSS_BROM/IO/ioserial.cpp
+++ b/QGNSS_BROM/IO/ioserial.cpp
@@ -311,7 +311,7 @@ bool IOserial::get_DTR()
 
 Qt::HANDLE IOserial::get_handle()
 {
-  return serial->handle ();
+  return (void*)serial->handle ();
 }
 
 QSerialPort::StopBits IOserial::get_StopBits()
diff --git a/QGNSS_BROM/MTK/mtk_brom_3352.cpp b/QGNSS_BROM/MTK/mtk_brom_3352.cpp
index a40e8cc..24da810 100644
--- a/QGNSS_BROM/MTK/mtk_brom_3352.cpp
+++ b/QGNSS_BROM/MTK/mtk_brom_3352.cpp
@@ -49,7 +49,7 @@
     setBbmsgStr ({BROM_BASE::brmsgtype::bb_Info,x});\
 
 #include "mtk_brom_3352.h"
-#include <qt_windows.h>
+// #include <qt_windows.h>
 MTK_BROM_3352::MTK_BROM_3352(MTK_Base *parent)
     : MTK_Base{parent}
 {
diff --git a/QGNSS_BROM/ST/st_base.h b/QGNSS_BROM/ST/st_base.h
index 25ced1c..0f9db42 100644
--- a/QGNSS_BROM/ST/st_base.h
+++ b/QGNSS_BROM/ST/st_base.h
@@ -16,6 +16,8 @@
 #define CRC32_EVAL_STR(d,c,s,l)       d = crc32_eval(c,s,l)
 #define CRC32_EVAL_INT(d,c,i)         { uint val = (i); (d) = crc32_eval(c,&val,sizeof(val)); }
 
+#define strcpy_s(a,b,c) strncpy(a,c,b)
+
 //Binary image options
    struct ImageOptions
 {
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.cpp b/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.cpp
index e5c077f..5812e8c 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.cpp
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.cpp
@@ -1 +1,3 @@
-#include "QG_IO_Base.h"
\ No newline at end of file
+#include "qgnss_flashtool.h"
+
+#include "QG_IO_Base.h"
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.h b/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.h
index 746077c..7875d43 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.h
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_IO_Base.h
@@ -1,12 +1,22 @@
+#include <string>
+#include <list>
+#include <functional>
+#include "QG_Print.h"
+#include "QG_Common.h"
 
+#include <Qt>
 #include <string>
 #include <list>
 #include <functional>
 #include "QG_Print.h"
 #include "QG_Common.h"
 
+#define QG_Handle Qt::HANDLE
+
 #define RETURN_ERROR_SIZE 0
 
+#ifndef __QG_IO_Base
+#define __QG_IO_Base
 class QG_PORTEXTERN QG_IO_Base
 {
 public:
@@ -43,3 +53,4 @@ public:
    WriteReady_FC WriteReady;
    ErrorMsg_FC ErrorMsg;
 };
+#endif
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_Print.cpp b/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_Print.cpp
index 1047a2c..b4ad0f5 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_Print.cpp
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/QG_Print.cpp
@@ -1,5 +1,8 @@
 #include "QG_Print.h"
 
+#include <algorithm>
+
+#define _itoa_s(a,b,c) sprintf(b, "%d", a) // JMF CORRECT
 
 QG_NAMESPACE_BEGAIN
 std::mutex print_mutex;
@@ -62,6 +65,7 @@ int buffsize = 10*1024;
          cb(type, msg, cout);
      }
  };
+
  ///multiple parameter support
  void mprint_c(MsgType type, const char* fmt, ...)
  {
@@ -149,7 +153,7 @@ int buffsize = 10*1024;
              auto err= _itoa_s(dvalue, strtemp, 16);
              if (!err)
              {
-                 std::transform(strtemp, strtemp + 8, strtemp, std::tolower);
+                 // std::transform(strtemp, strtemp + 8, strtemp, std::tolower); JMF
                  msgprefix.append(strtemp);
              }
              break;
@@ -161,7 +165,7 @@ int buffsize = 10*1024;
              auto err= _itoa_s(dvalue, strtemp, 16);
              if (!err)
              {
-                 std::transform(strtemp, strtemp + 8, strtemp, std::toupper);
+                 // std::transform(strtemp, strtemp + 8, strtemp, std::toupper); JMF
                  msgprefix.append(strtemp);
              }
              break;
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.cpp b/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.cpp
index b41fec8..6c9b7c7 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.cpp
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.cpp
@@ -1,4 +1,11 @@
+#include <string>
+#include <list>
+#include <functional>
+#include "QG_Print.h"
+#include "QG_Common.h"
+
 #include "ST8100_USART_download.h"
+#include <cmath>
 
 ST8100_USART_download::ST8100_USART_download()
 {
@@ -527,7 +534,7 @@ bool ST8100_USART_download::write_memory_command_hp(unsigned int time,
     int mis = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - start).count();
     int progress = QG_get_progress(size, total_send_size, 100);
     float rate=((float)per_pkg_size_/(mis/1000.0))/1000;//
-    auto rate_s= std::to_string (std::round (rate*10.0)/10);
+    auto rate_s= std::to_string (round (rate*10.0)/10);
     char rate_fmt[1024];
     sprintf (rate_fmt,"%d Bytes/%d Bytes    %s KBps",total_send_size,size,rate_s.c_str ());
     QGPROGRESS_FMT(Write_Memory_name, 100,rate_fmt, progress);
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.h b/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.h
index 57ae0ec..3bf82a8 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.h
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_USART_download.h
@@ -6,9 +6,10 @@
 #include <functional>
 #include <atomic>
 #include <chrono>
-#include "QG_Uart.h"
 #include "QG_Common.h"
 #include "QG_Print.h"
+#include "QG_Uart.h"
+
 /// <summary>
 /// USART protocol used in the STM32 bootloader
 /// </summary>
@@ -186,4 +187,4 @@ private:
     constexpr static unsigned short Send_Command_Size = 2;
 };
 
-#endif
\ No newline at end of file
+#endif
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_wmcu_fwupg.cpp b/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_wmcu_fwupg.cpp
index 642731f..0c65142 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_wmcu_fwupg.cpp
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/st/teseo5/ST8100_wmcu_fwupg.cpp
@@ -1,4 +1,5 @@
 #include "ST8100_wmcu_fwupg.h"
+#include <cmath>
 
 ST8100_wmcu_fwupg::ST8100_wmcu_fwupg()
 {
@@ -293,7 +294,7 @@ bool ST8100_wmcu_fwupg::send_Firmware(	ClassID id, char* fwdata,
     int mis = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - start).count();
     int progress = QG_get_progress(fwsize, totalsendsize, 100);
     float rate=((float)persize/(mis/1000.0))/1000;//
-    auto rate_s= std::to_string (std::round (rate*10.0)/10);
+    auto rate_s= std::to_string (round (rate*10.0)/10);
     char rate_fmt[1024];
     sprintf (rate_fmt,"%d Bytes/%d Bytes    %s KBps",totalsendsize,fwsize,rate_s.c_str ());
     QGPROGRESS_FMT(Send_Firmware_name, 100,rate_fmt, progress);
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart.h b/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart.h
index 8c1bbd0..e360bbd 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart.h
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart.h
@@ -1,8 +1,15 @@
 #ifndef __UART_QG_UART__
 #define __UART_QG_UART__
 
+#include <Qt>
 #include "QG_Uart_Base.h"
 
+#include <string>
+#include <list>
+#include <functional>
+#include "QG_Print.h"
+#include "QG_Common.h"
+
 #define DEFAULTQUEUESIZE 6000
 #define DEFAULTWAITEVENTTIME 500
 
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_Base.h b/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_Base.h
index ecb461d..85a9b1b 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_Base.h
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_Base.h
@@ -1,6 +1,15 @@
 #ifndef __UART_QG_UART_BASE_H__
 #define __UART_QG_UART_BASE_H__
 
+#define QG_Handle Qt::HANDLE
+#define INVALID_HANDLE_VALUE ((void*)(long long)-1)
+
+#include <string>
+#include <list>
+#include <functional>
+#include "QG_Print.h"
+#include "QG_Common.h"
+
 #include "QG_IO_Base.h"
 
 #include <thread>
diff --git a/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_win.cpp b/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_win.cpp
index 8e49cf2..a6010f4 100644
--- a/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_win.cpp
+++ b/QGNSS_FW_UPG/QGNSS_FW_UPG/uart/QG_Uart_win.cpp
@@ -1,5 +1,7 @@
 #include "QG_Uart.h"
 
+#define DWORD int32_t
+#define BOOL bool
 
 #ifdef UNICODE
 #define TP_UART_FILENAME_PREFIX     L"\\\\.\\"
@@ -17,45 +19,45 @@ struct QG_Uart_Manage
   {
     handle= hdle;
   }
-  void initialize_overlapped(LPOVERLAPPED overlapped)
+  void initialize_overlapped(/*LPOVERLAPPED overlapped*/)
   {
-    ZeroMemory(overlapped, sizeof(OVERLAPPED));
-    if (overlapped->hEvent != NULL)
-    {
-      ResetEvent(overlapped->hEvent);
-      overlapped->hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
-      return;
-    }
-    overlapped->hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
+//    ZeroMemory(overlapped, sizeof(OVERLAPPED));
+//    if (overlapped->hEvent != NULL)
+//    {
+//      ResetEvent(overlapped->hEvent);
+//      overlapped->hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
+//      return;
+//    }
+//    overlapped->hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
   }
-  void release_overlapped(LPOVERLAPPED overlapped)
+  void release_overlapped(/*LPOVERLAPPED overlapped*/)
   {
-    ResetEvent(overlapped->hEvent);
+//    ResetEvent(overlapped->hEvent);
   }
   DWORD inqueue_;
   DWORD outqueue_;
-  QG_Uart_Manage():
-        write_overlapped(),
-        read_overlapped(),
-        wait_overlapped()
-  {
-    inqueue_ = DEFAULTQUEUESIZE;
-    outqueue_ = DEFAULTQUEUESIZE;
-    handle = nullptr;
-    initialize_overlapped(&write_overlapped);
-    initialize_overlapped(&read_overlapped);
-    initialize_overlapped(&wait_overlapped);
+  QG_Uart_Manage()//:
+//        write_overlapped(),
+//        read_overlapped(),
+//        wait_overlapped()
+  {
+//    inqueue_ = DEFAULTQUEUESIZE;
+//    outqueue_ = DEFAULTQUEUESIZE;
+//    handle = nullptr;
+//    initialize_overlapped(&write_overlapped);
+//    initialize_overlapped(&read_overlapped);
+//    initialize_overlapped(&wait_overlapped);
   }
   ~QG_Uart_Manage()
   {
-    release_overlapped(&write_overlapped);
-    release_overlapped(&read_overlapped);
-    release_overlapped(&wait_overlapped);
+//    release_overlapped(&write_overlapped);
+//    release_overlapped(&read_overlapped);
+//    release_overlapped(&wait_overlapped);
   }
-  OVERLAPPED write_overlapped;
-  OVERLAPPED read_overlapped;
-  OVERLAPPED wait_overlapped;
-  DCB      other_dcb;
+//  OVERLAPPED write_overlapped;
+//  OVERLAPPED read_overlapped;
+//  OVERLAPPED wait_overlapped;
+//  DCB      other_dcb;
   DWORD    other_mask;
  private:
   QG_Handle handle;
@@ -63,10 +65,10 @@ struct QG_Uart_Manage
 
 bool CheckHandle(QG_Handle handle)
 {
-  if (handle == INVALID_HANDLE_VALUE|| handle==nullptr)
-  {
-    return false;
-  }
+//  if (handle == INVALID_HANDLE_VALUE|| handle==nullptr)
+//  {
+//    return false;
+//  }
   return true;
 }
 //Sync
@@ -78,28 +80,28 @@ QG_Handle CreateSyncWinfile(std::string portname, QG_Uart::OpenMode mode)
   std::string comname = TP_UART_FILENAME_PREFIX + portname;
 #endif // !UNICODE
 
-  DWORD dwDesiredAccess_ = GENERIC_READ | GENERIC_WRITE;
+//  DWORD dwDesiredAccess_ = GENERIC_READ | GENERIC_WRITE;
   switch (mode)
   {
     case QG_IO_Base::ReadOnly:
-      dwDesiredAccess_ = GENERIC_READ;
+//      dwDesiredAccess_ = GENERIC_READ;
       break;
     case QG_IO_Base::WriteOnly:
-      dwDesiredAccess_ = GENERIC_WRITE;
+//      dwDesiredAccess_ = GENERIC_WRITE;
       break;
     default:
       break;
   }
-  QG_Handle handle=
-      CreateFile(                   /*unicode*/
-                 comname.c_str(),
-                 dwDesiredAccess_,
-                 0,                          /* no share  */
-                 NULL,                       /* no security */
-                 OPEN_EXISTING,
-                 FILE_ATTRIBUTE_NORMAL,      /* no threads */
-                 NULL                        /* no templates */
-                 );
+  QG_Handle handle; // =
+//      CreateFile(                   /*unicode*/
+//                 comname.c_str(),
+//                 dwDesiredAccess_,
+//                 0,                          /* no share  */
+//                 NULL,                       /* no security */
+//                 OPEN_EXISTING,
+//                 FILE_ATTRIBUTE_NORMAL,      /* no threads */
+//                 NULL                        /* no templates */
+//                 );
   return handle;
 }
 
@@ -111,38 +113,38 @@ QG_Handle CreateAsyncWinfile(std::string portname, QG_Uart::OpenMode mode)
 #else
   std::string comname = TP_UART_FILENAME_PREFIX + portname;
 #endif // !UNICODE
-  DWORD dwDesiredAccess_ = GENERIC_READ | GENERIC_WRITE;
+//  DWORD dwDesiredAccess_ = GENERIC_READ | GENERIC_WRITE;
   switch (mode)
   {
     case QG_IO_Base::ReadOnly:
-      dwDesiredAccess_ = GENERIC_READ;
+ //     dwDesiredAccess_ = GENERIC_READ;
       break;
     case QG_IO_Base::WriteOnly:
-      dwDesiredAccess_ = GENERIC_WRITE;
+//      dwDesiredAccess_ = GENERIC_WRITE;
       break;
     default:
       break;
   }
-  QG_Handle handle =
-      CreateFile(                   /*unicode*/
-                 comname.c_str(),
-                 dwDesiredAccess_,
-                 0,                          /* no share  */
-                 NULL,                       /* no security */
-                 OPEN_EXISTING,
-                 FILE_FLAG_OVERLAPPED,      
-                 NULL                        /* no templates */
-                 );
+  QG_Handle handle; // =
+//      CreateFile(                   /*unicode*/
+//                 comname.c_str(),
+//                 dwDesiredAccess_,
+//                 0,                          /* no share  */
+//                 NULL,                       /* no security */
+//                 OPEN_EXISTING,
+//                 FILE_FLAG_OVERLAPPED,      
+//                 NULL                        /* no templates */
+//                 );
   return handle;
 }
 
 ///timeout
-bool SetTimeOut(QG_Handle handle, COMMTIMEOUTS  port_timeouts)
+bool SetTimeOut(/*QG_Handle handle, COMMTIMEOUTS  port_timeouts*/)
 {
-  return  SetCommTimeouts(handle, &port_timeouts);
+  return true; //  SetCommTimeouts(handle, &port_timeouts);
 }
 ///reset native dcb
-bool reset_dcb(QG_Handle handle,LPDCB dcb)
+bool reset_dcb(QG_Handle handle /*,LPDCB dcb*/)
 {
   if (!CheckHandle(handle))
   {
@@ -150,7 +152,7 @@ bool reset_dcb(QG_Handle handle,LPDCB dcb)
     return false;
   }
   bool ack = false;
-  ack = SetCommState(handle, dcb);
+//  ack = SetCommState(handle, dcb);
   if (!ack)
   {
     QGERROR("error SetCommState" QG_ENDL );
@@ -167,40 +169,40 @@ bool SetDCB(QG_Handle handle, SerialPortInfo * info)
     QGERROR("error handle" QG_ENDL );
     return false;
   }
-  DCB dcb;
-  memset(&dcb, 0, sizeof(DCB));
+//  DCB dcb;
+//  memset(&dcb, 0, sizeof(DCB));
   bool ack = false;
-  ack = GetCommState(handle, &dcb);
+//  ack = GetCommState(handle, &dcb);
   if (!ack)
   {
     DEBUG_CODE; QG_Uart::PrintLastErrorStr();
     return false;
   }
 
-  dcb.DCBlength = sizeof(DCB);
-  dcb.BaudRate = (DWORD)info->baudrate;
-  dcb.fParity =  TRUE;
-  dcb.Parity =   info->parity;
-  dcb.ByteSize = info->databits;
-  dcb.StopBits = info->stopbits-1;
+//  dcb.DCBlength = sizeof(DCB);
+//  dcb.BaudRate = (DWORD)info->baudrate;
+//  dcb.fParity =  TRUE;
+//  dcb.Parity =   info->parity;
+//  dcb.ByteSize = info->databits;
+//  dcb.StopBits = info->stopbits-1;
   switch (info->flowcontrol)
   {
     case FlowControl::NoFlowControl:
-      dcb.fDtrControl = DTR_CONTROL_DISABLE;
-      dcb.fRtsControl = RTS_CONTROL_DISABLE;
+//      dcb.fDtrControl = DTR_CONTROL_DISABLE;
+//      dcb.fRtsControl = RTS_CONTROL_DISABLE;
       break;
     case SoftwareControl:
-      dcb.fInX = TRUE;
-      dcb.fOutX = TRUE;
+//      dcb.fInX = TRUE;
+//      dcb.fOutX = TRUE;
       break;
     case HardwareControl:
-      dcb.fOutxCtsFlow = TRUE;
-      dcb.fRtsControl = RTS_CONTROL_HANDSHAKE;
+//      dcb.fOutxCtsFlow = TRUE;
+//      dcb.fRtsControl = RTS_CONTROL_HANDSHAKE;
       break;
     default:
       break;
   }
-  ack = SetCommState(handle, &dcb);
+//  ack = SetCommState(handle, &dcb);
   if (!ack)
   {
     QGERROR("error SetCommState" QG_ENDL );
@@ -211,27 +213,27 @@ bool SetDCB(QG_Handle handle, SerialPortInfo * info)
 }
 
 ///mask
-bool SetMask(QG_Handle handle,OVERLAPPED &old)
+bool SetMask(QG_Handle handle /*,OVERLAPPED &old*/)
 {
   if (!CheckHandle(handle))
   {
     QGERROR("error handle" QG_ENDL );
     return false;
   }
-  BOOL ack=
-      SetCommMask(handle,
-                  EV_RXCHAR
-                      | EV_RXFLAG
-                      | EV_TXEMPTY
-                      | EV_CTS
-                      | EV_DSR
-                      | EV_RLSD
-                      | EV_BREAK
-                      | EV_ERR
-                      | EV_RING
-                      | EV_PERR
-                      | EV_RX80FULL
-                  );
+  BOOL ack; //=
+//      SetCommMask(handle,
+//                  EV_RXCHAR
+//                      | EV_RXFLAG
+//                      | EV_TXEMPTY
+//                      | EV_CTS
+//                      | EV_DSR
+//                      | EV_RLSD
+//                      | EV_BREAK
+//                      | EV_ERR
+//                      | EV_RING
+//                      | EV_PERR
+//                      | EV_RX80FULL
+//                  );
   if (!ack)
   {
     DEBUG_CODE; QG_Uart::PrintLastErrorStr();
@@ -246,10 +248,10 @@ bool SetMask(QG_Handle handle,DWORD dwEvtMask)
     QGERROR("error handle" QG_ENDL);
     return false;
   }
-  BOOL ack =
-      SetCommMask(handle,
-                  dwEvtMask
-                  );
+  BOOL ack; // =
+//      SetCommMask(handle,
+//                  dwEvtMask
+//                  );
   if (!ack)
   {
     DEBUG_CODE; QG_Uart::PrintLastErrorStr();
@@ -260,17 +262,17 @@ bool SetMask(QG_Handle handle,DWORD dwEvtMask)
 
 bool SetMask(QG_Handle handle,QG_IO_Base::OpenMode mode)
 {
-  const DWORD eventMask = (mode & QG_IO_Base::OpenMode::ReadOnly) ? EV_RXCHAR : 0;
-  if (!::SetCommMask(handle, eventMask))
-  {
-    DEBUG_CODE; QG_Uart::PrintLastErrorStr();
-    return false;
-  }
+//  const DWORD eventMask = (mode & QG_IO_Base::OpenMode::ReadOnly) ? EV_RXCHAR : 0;
+//  if (!::SetCommMask(handle, eventMask))
+//  {
+//    DEBUG_CODE; QG_Uart::PrintLastErrorStr();
+//    return false;
+//  }
   return true;
 };
 
 ///wait event 
-bool WaitEvent(QG_Handle handle , OVERLAPPED& old)
+bool WaitEvent(QG_Handle handle /*, OVERLAPPED& old*/)
 {
   if (!CheckHandle(handle))
   {
@@ -279,68 +281,68 @@ bool WaitEvent(QG_Handle handle , OVERLAPPED& old)
   }
   DWORD dwEvtMask=0;
   //TODO 事件触发
-  if (WaitCommEvent(handle, &dwEvtMask, &old))
-  {
-    SetMask(handle, old);
-    if (dwEvtMask & EV_RXCHAR)
-    {
-      QGDEBUG("EV_RXCHAR" QG_ENDL );
-    }
-    if (dwEvtMask & EV_RXFLAG)
-    {
-      QGDEBUG("EV_RXFLAG" QG_ENDL );
-    }
-    if (dwEvtMask & EV_TXEMPTY)
-    {
-      QGDEBUG("EV_TXEMPTY" QG_ENDL );
-    }
-    if (dwEvtMask & EV_CTS)
-    {
-      QGDEBUG("EV_CTS" QG_ENDL );
-    }
-    if (dwEvtMask & EV_DSR)
-    {
-      QGDEBUG("EV_DSR" QG_ENDL );
-    }
-    if (dwEvtMask & EV_RLSD)
-    {
-      QGDEBUG("EV_RLSD" QG_ENDL );
-    }
-    if (dwEvtMask & EV_BREAK)
-    {
-      QGDEBUG("EV_BREAK" QG_ENDL );
-    }
-    if (dwEvtMask & EV_ERR)
-    {
-      QGDEBUG("EV_ERR" QG_ENDL );
-    }
-    if (dwEvtMask & EV_RING)
-    {
-      QGDEBUG("EV_RING" QG_ENDL );
-    }
-    if (dwEvtMask & EV_PERR)
-    {
-      QGDEBUG("EV_PERR" QG_ENDL );
-    }
-    if (dwEvtMask & EV_RX80FULL)
-    {
-      QGDEBUG("EV_RX80FULL" QG_ENDL );
-    }
-
-  }
-  else
-  {
-    DWORD dwRet = GetLastError();
-    if (ERROR_IO_PENDING == dwRet)
-    {
-      QGERROR("I/O is pending..." QG_ENDL);
-    }
-    else
-    {
-      DEBUG_CODE; QG_Uart::PrintLastErrorStr();
-    }
-    return false;
-  }
+//  if (WaitCommEvent(handle, &dwEvtMask, &old))
+//  {
+//    SetMask(handle, old);
+//    if (dwEvtMask & EV_RXCHAR)
+//    {
+//      QGDEBUG("EV_RXCHAR" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_RXFLAG)
+//    {
+//      QGDEBUG("EV_RXFLAG" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_TXEMPTY)
+//    {
+//      QGDEBUG("EV_TXEMPTY" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_CTS)
+//    {
+//      QGDEBUG("EV_CTS" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_DSR)
+//    {
+//      QGDEBUG("EV_DSR" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_RLSD)
+//    {
+//      QGDEBUG("EV_RLSD" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_BREAK)
+//    {
+//      QGDEBUG("EV_BREAK" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_ERR)
+//    {
+//      QGDEBUG("EV_ERR" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_RING)
+//    {
+//      QGDEBUG("EV_RING" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_PERR)
+//    {
+//      QGDEBUG("EV_PERR" QG_ENDL );
+//    }
+//    if (dwEvtMask & EV_RX80FULL)
+//    {
+//      QGDEBUG("EV_RX80FULL" QG_ENDL );
+//    }
+//
+//  }
+//  else
+//  {
+//    DWORD dwRet = GetLastError();
+//    if (ERROR_IO_PENDING == dwRet)
+//    {
+//      QGERROR("I/O is pending..." QG_ENDL);
+//    }
+//    else
+//    {
+//      DEBUG_CODE; QG_Uart::PrintLastErrorStr();
+//    }
+//    return false;
+//  }
   return true;
 }
 
@@ -389,12 +391,12 @@ bool QG_Uart::open(OpenMode mode)
 
 bool QG_Uart::initialize(QG_Uart::OpenMode mode)
 {
-  if (!SetDCB(uartmanage_->Get_Handle(), serialport_info))
-  {
-    close();
-    QGERROR(" error SetDCB" QG_ENDL);
-    return false;
-  }
+//  if (!SetDCB(uartmanage_->Get_Handle(), serialport_info))
+//  {
+//    close();
+//    QGERROR(" error SetDCB" QG_ENDL);
+//    return false;
+//  }
   if (!set_read_interval_timeout())
   {
     close();
@@ -417,7 +419,7 @@ void QG_Uart::RunWaitEventThread()
   {
     runmask = false;
     QGDEBUG("WaitForSingleObject" QG_ENDL);
-    WaitForSingleObject(uartmask_td_.native_handle(), DEFAULTWAITEVENTTIME);
+//    WaitForSingleObject(uartmask_td_.native_handle(), DEFAULTWAITEVENTTIME);
   }
   runmask = true;
   QGDEBUG("UartMask joinable and start " QG_ENDL);
@@ -425,7 +427,7 @@ void QG_Uart::RunWaitEventThread()
                              {
                                while (runmask && is_open())
                                {
-                                 WaitEvent(uartmanage_->Get_Handle(), uartmanage_->wait_overlapped);
+//                                 WaitEvent(uartmanage_->Get_Handle(), uartmanage_->wait_overlapped);
                                }
                                runmask = false;
                              });
@@ -468,8 +470,8 @@ bool QG_Uart::close()
   }
   //SetCommMask(uartmanage_->Get_Handle(), 0);
   clear();
-  bool ack= CloseHandle(uartmanage_->Get_Handle());
-  uartmanage_->Set_Handle( INVALID_HANDLE_VALUE );
+  bool ack; // = CloseHandle(uartmanage_->Get_Handle());
+//  uartmanage_->Set_Handle( INVALID_HANDLE_VALUE );
   if (!ack)
   {
     QGERROR("close error" QG_ENDL);
@@ -480,30 +482,30 @@ bool QG_Uart::close()
 
 std::size_t QG_Uart::write(const char* wbuffer, std::size_t size)
 {
-  if (!CheckHandle(uartmanage_->Get_Handle()))
+//  if (!CheckHandle(uartmanage_->Get_Handle()))
   {
     QGERROR("error handle" QG_ENDL );
     return RETURN_ERROR_SIZE;
   }
   DWORD written=0;
-  bool ack= WriteFile(uartmanage_->Get_Handle(), wbuffer, size, &written, &uartmanage_->write_overlapped);
+  bool ack; // = WriteFile(uartmanage_->Get_Handle(), wbuffer, size, &written, &uartmanage_->write_overlapped);
   DWORD last_error = 0;
   if(!ack)
   {
-    if (GetLastError() == ERROR_IO_PENDING)
+//    if (GetLastError() == ERROR_IO_PENDING)
     {
-      while (!GetOverlappedResult(uartmanage_->Get_Handle(), &uartmanage_->write_overlapped, &written, FALSE))
+//      while (!GetOverlappedResult(uartmanage_->Get_Handle(), &uartmanage_->write_overlapped, &written, FALSE))
       {
-        if (GetLastError() == ERROR_IO_INCOMPLETE)
+//        if (GetLastError() == ERROR_IO_INCOMPLETE)
         {
-          continue;
+//          continue;
         }
-        else
+//        else
         {
           QGERROR("WriteFile Error " QG_ENDL);
-          DEBUG_CODE; QG_Uart::PrintLastErrorStr();
-          ClearCommError(uartmanage_->Get_Handle(), &last_error, NULL);
-          break;
+//          DEBUG_CODE; QG_Uart::PrintLastErrorStr();
+//          ClearCommError(uartmanage_->Get_Handle(), &last_error, NULL);
+//          break;
         }
       }
     }
@@ -519,39 +521,39 @@ std::size_t QG_Uart::read(char* rbuffer, std::size_t size, std::size_t timeout)
     QGERROR("CheckHandle error " QG_ENDL);
     return RETURN_ERROR_SIZE;
   }
-  COMMTIMEOUTS time{0};
-  if( !GetCommTimeouts(uartmanage_->Get_Handle(), &time))
+//  COMMTIMEOUTS time{0};
+//  if( !GetCommTimeouts(uartmanage_->Get_Handle(), &time))
   {
     QGERROR("GetCommTimeouts error " QG_ENDL);
     DEBUG_CODE; QG_Uart::PrintLastErrorStr();
     return RETURN_ERROR_SIZE;
   }
-  time.ReadTotalTimeoutConstant = timeout;
-  if (!SetCommTimeouts(uartmanage_->Get_Handle(), &time))
+//  time.ReadTotalTimeoutConstant = timeout;
+//  if (!SetCommTimeouts(uartmanage_->Get_Handle(), &time))
   {
     QGERROR("SetCommTimeouts error " QG_ENDL);
     DEBUG_CODE; QG_Uart::PrintLastErrorStr();
     return RETURN_ERROR_SIZE;
   }
   DWORD readbytes=0;
-  bool ack = ReadFile(uartmanage_->Get_Handle(), rbuffer, size, &readbytes, &uartmanage_->read_overlapped);
+  bool ack; // = ReadFile(uartmanage_->Get_Handle(), rbuffer, size, &readbytes, &uartmanage_->read_overlapped);
   DWORD last_error = 0;
   if (!ack)
   {
-    if (GetLastError() == ERROR_IO_PENDING)
+//    if (GetLastError() == ERROR_IO_PENDING)
     {
-      while (!GetOverlappedResult(uartmanage_->Get_Handle(), &uartmanage_->read_overlapped, &readbytes, FALSE))
+//      while (!GetOverlappedResult(uartmanage_->Get_Handle(), &uartmanage_->read_overlapped, &readbytes, FALSE))
       {
-        if (GetLastError() == ERROR_IO_INCOMPLETE)
+//        if (GetLastError() == ERROR_IO_INCOMPLETE)
         {
-          continue;
+//          continue;
         }
-        else
+//        else
         {
           QGERROR("ReadFile Error " QG_ENDL);
           DEBUG_CODE; QG_Uart::PrintLastErrorStr();
-          ClearCommError(uartmanage_->Get_Handle(), &last_error, NULL);
-          break;
+//          ClearCommError(uartmanage_->Get_Handle(), &last_error, NULL);
+//          break;
         }
       }
     }
@@ -620,31 +622,31 @@ bool QG_Uart::set_pinout_signals(PinoutSignal pin, bool enable)
     QGERROR("error handle" QG_ENDL );
     return false;
   }
-  int flag = enable ? TRUE : FALSE;
-  DCB dcb;
-  memset(&dcb, 0, sizeof(DCB));
+//  int flag = enable ? TRUE : FALSE;
+//  DCB dcb;
+//  memset(&dcb, 0, sizeof(DCB));
   bool ack = false;
-  ack = GetCommState(uartmanage_->Get_Handle(), &dcb);
+//  ack = GetCommState(uartmanage_->Get_Handle(), &dcb);
   if (!ack)
   {
     QGERROR("error  " QG_ENDL );
     DEBUG_CODE; QG_Uart::PrintLastErrorStr();
     return ack;
   }
-  switch (pin)
-  {
-    case DataTerminalReadySignal:
-      dcb.fDtrControl = flag;
-      break;
-    case RequestToSendSignal:
-      dcb.fRtsControl = flag;
-      break;
-    default:
-      dcb.fDtrControl = flag;
-      dcb.fRtsControl = flag;
-      break;
-  }
-  ack=    SetDCB(uartmanage_->Get_Handle(), serialport_info);
+//  switch (pin)
+//  {
+//    case DataTerminalReadySignal:
+//      dcb.fDtrControl = flag;
+//      break;
+//    case RequestToSendSignal:
+//      dcb.fRtsControl = flag;
+//      break;
+//    default:
+//      dcb.fDtrControl = flag;
+//      dcb.fRtsControl = flag;
+//      break;
+//  }
+//  ack=    SetDCB(uartmanage_->Get_Handle(), serialport_info);
   if (!ack)
   {
     QGERROR("%s error set PinoutSignal: %d" QG_ENDL , pin);
@@ -672,9 +674,9 @@ bool QG_Uart::write_response(WriteResponse writeresponse)
 #include <system_error>
 void QG_Uart::PrintLastErrorStr( )
 {
-  DWORD errCode = GetLastError();
-  std::string message = std::system_category().message(errCode);
-  QG::mprint(QG::ERROR_, "system error %d: %s ", errCode, message.data ());
+  DWORD errCode; //  = GetLastError();
+//  std::string message = std::system_category().message(errCode);
+//  QG::mprint(QG::ERROR_, "system error %d: %s ", errCode, message.data ());
 }
 
 void QG_Uart::stop_upg(bool stop)
@@ -687,13 +689,13 @@ void QG_Uart::stop_upg(bool stop)
     {
       return ;
     }
-    COMMTIMEOUTS time{0};
-    if( !GetCommTimeouts(uartmanage_->Get_Handle(), &time))
+//    COMMTIMEOUTS time{0};
+//    if( !GetCommTimeouts(uartmanage_->Get_Handle(), &time))
     {
       return ;
     }
-    time.ReadTotalTimeoutConstant = 1000;
-    if (!SetCommTimeouts(uartmanage_->Get_Handle(), &time))
+//    time.ReadTotalTimeoutConstant = 1000;
+//    if (!SetCommTimeouts(uartmanage_->Get_Handle(), &time))
     {
       return ;
     }
@@ -725,7 +727,7 @@ void QG_Uart::destory_Uart_Manage()
 
 bool QG_Uart::is_open()
 {
-  if (!CheckHandle(uartmanage_->Get_Handle()))
+//  if (!CheckHandle(uartmanage_->Get_Handle()))
   {
     return false;
   }
@@ -734,29 +736,29 @@ bool QG_Uart::is_open()
 
 QG_Handle QG_Uart::get_native()
 {
-  return uartmanage_->Get_Handle();
+//  return uartmanage_->Get_Handle();
 }
 
 bool QG_Uart::set_native(QG_Handle handle)
 {
-  if (is_open()&&handle!=uartmanage_->Get_Handle ())
+//  if (is_open()&&handle!=uartmanage_->Get_Handle ())
   {
     QGINFO ("close handle" QG_ENDL );
     close();
   }
 
-  if (!CheckHandle(handle))
+//  if (!CheckHandle(handle))
   {
     QGERROR("error handle %X" QG_ENDL,handle );
     return false;
   }
-  uartmanage_->Set_Handle(handle);
+//  uartmanage_->Set_Handle(handle);
 
   error_clear();
 
-  GetCommMask (handle,&uartmanage_->other_mask);
-  QGINFO ("native flags %d",uartmanage_->other_mask);
-  GetCommState (handle,&uartmanage_->other_dcb);
+//  GetCommMask (handle,&uartmanage_->other_mask);
+//  QGINFO ("native flags %d",uartmanage_->other_mask);
+//  GetCommState (handle,&uartmanage_->other_dcb);
   //SetMask(handle,QG_IO_Base::OpenMode::NotOpen);//delete other mask
   //SetMask(handle, uartmanage_->old);
   //RunWaitEventThread();
@@ -771,38 +773,38 @@ void QG_Uart::error_clear()
     return ;
   }
   DWORD dwErrorFlags; //错误标志
-  COMSTAT comStat; //通讯状态
-  ClearCommError(uartmanage_->Get_Handle (), &dwErrorFlags, &comStat); //清除通讯错误，获得设备当前状态
+//  COMSTAT comStat; //通讯状态
+//  ClearCommError(uartmanage_->Get_Handle (), &dwErrorFlags, &comStat); //清除通讯错误，获得设备当前状态
 }
 
 bool QG_Uart::reset()
 {
-  if(!SetMask (uartmanage_->Get_Handle (),uartmanage_->other_mask))
+//  if(!SetMask (uartmanage_->Get_Handle (),uartmanage_->other_mask))
   {
     return false;
   }
-  return reset_dcb (uartmanage_->Get_Handle (),&uartmanage_->other_dcb);
+//  return reset_dcb (uartmanage_->Get_Handle (),&uartmanage_->other_dcb);
 };
 bool QG_Uart::set_buffer_size(Direction dir, std::size_t size)
 {
-  switch (dir)
-  {
-    case Direction::Input:
-      uartmanage_->inqueue_ = size;
-      break;
-    case Direction::Output:
-      uartmanage_->outqueue_ = size;
-      break;
-    case Direction::AllDirections:
-      uartmanage_->inqueue_ = size;
-      uartmanage_->outqueue_ = size;
-      break;
-    default:
-      uartmanage_->inqueue_ = size;
-      uartmanage_->outqueue_ = size;
-      break;
-  }
-  bool ack= SetupComm(uartmanage_->Get_Handle(), uartmanage_->inqueue_, uartmanage_->outqueue_);
+//  switch (dir)
+//  {
+//    case Direction::Input:
+//      uartmanage_->inqueue_ = size;
+//      break;
+//    case Direction::Output:
+//      uartmanage_->outqueue_ = size;
+//      break;
+//    case Direction::AllDirections:
+//      uartmanage_->inqueue_ = size;
+//      uartmanage_->outqueue_ = size;
+//      break;
+//    default:
+//      uartmanage_->inqueue_ = size;
+//      uartmanage_->outqueue_ = size;
+//      break;
+//  }
+  bool ack; // = SetupComm(uartmanage_->Get_Handle(), uartmanage_->inqueue_, uartmanage_->outqueue_);
   if (!ack)
   {
     QGERROR("error" QG_ENDL );
@@ -813,22 +815,22 @@ bool QG_Uart::set_buffer_size(Direction dir, std::size_t size)
 bool QG_Uart::clear(Direction direction)
 {
   DWORD flags;
-  switch (direction)
-  {
-    case Direction::Input:
-      flags =  PURGE_TXCLEAR  | PURGE_TXABORT;
-      break;
-    case Direction::Output:
-      flags = PURGE_RXCLEAR | PURGE_RXABORT;
-      break;
-    case Direction::AllDirections:
-      flags = PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT;
-      break;
-    default:
-      flags = PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT;
-      break;
-  }
-  bool ack= PurgeComm(uartmanage_->Get_Handle(), flags);
+//  switch (direction)
+//  {
+//    case Direction::Input:
+//      flags =  PURGE_TXCLEAR  | PURGE_TXABORT;
+//      break;
+//    case Direction::Output:
+//      flags = PURGE_RXCLEAR | PURGE_RXABORT;
+//      break;
+//    case Direction::AllDirections:
+//      flags = PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT;
+//      break;
+//    default:
+//      flags = PURGE_RXCLEAR | PURGE_TXCLEAR | PURGE_RXABORT | PURGE_TXABORT;
+//      break;
+//  }
+  bool ack; //= PurgeComm(uartmanage_->Get_Handle(), flags);
   if (!ack)
   {
     QGERROR("PurgeComm error" QG_ENDL );
@@ -838,7 +840,7 @@ bool QG_Uart::clear(Direction direction)
 
 bool QG_Uart::flush()
 {
-  bool ack= FlushFileBuffers(uartmanage_->Get_Handle());
+  bool ack; // = FlushFileBuffers(uartmanage_->Get_Handle());
   if (!ack)
   {
     QGERROR("error  " QG_ENDL );
@@ -849,98 +851,95 @@ bool QG_Uart::flush()
 bool QG_Uart::set_read_interval_timeout(int timeout)
 {
   read_interval_timeout_ = timeout;
-  COMMTIMEOUTS commtimeouts;
-  commtimeouts.ReadIntervalTimeout = timeout;
-  commtimeouts.ReadTotalTimeoutMultiplier = 0;
-  commtimeouts.ReadTotalTimeoutConstant = 0;
-  commtimeouts.WriteTotalTimeoutConstant = 0;
-  commtimeouts.WriteTotalTimeoutMultiplier = 0;
-  bool ack=  SetTimeOut(uartmanage_->Get_Handle(), commtimeouts);
+//  COMMTIMEOUTS commtimeouts;
+//  commtimeouts.ReadIntervalTimeout = timeout;
+//  commtimeouts.ReadTotalTimeoutMultiplier = 0;
+//  commtimeouts.ReadTotalTimeoutConstant = 0;
+//  commtimeouts.WriteTotalTimeoutConstant = 0;
+//  commtimeouts.WriteTotalTimeoutMultiplier = 0;
+  bool ack; // =  SetTimeOut(uartmanage_->Get_Handle(), commtimeouts);
   return ack;
 }
 
 
-#include "windows.h" // CreateFile GetTickCount64
-#include "tchar.h" // _sntprintf _T
+//#include "windows.h" // CreateFile GetTickCount64
+//#include "tchar.h" // _sntprintf _T
 
-#include <Setupapi.h> //SetupDiGetClassDevs Setup*
-#include <initguid.h> //GUID
+//#include <Setupapi.h> //SetupDiGetClassDevs Setup*
+//#include <initguid.h> //GUID
 
-#pragma comment (lib, "setupapi.lib")
+//#pragma comment (lib, "setupapi.lib")
 
 using namespace std;
 
 #ifndef GUID_DEVINTERFACE_COMPORT
-DEFINE_GUID(GUID_DEVINTERFACE_COMPORT, 0x86E0D1E0L, 0x8089, 0x11D0, 0x9C, 0xE4, 0x08, 0x00, 0x3E, 0x30, 0x1F, 0x73);
+//DEFINE_GUID(GUID_DEVINTERFACE_COMPORT, 0x86E0D1E0L, 0x8089, 0x11D0, 0x9C, 0xE4, 0x08, 0x00, 0x3E, 0x30, 0x1F, 0x73);
 #endif
 
-
-
-
 bool enumDetailsSerialPorts(std::vector<SerialPortInfo>& portInfoList)
 {
   // https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdienumdeviceinfo
 
   bool bRet = false;
-  SerialPortInfo m_serialPortInfo;
+//  SerialPortInfo m_serialPortInfo;
 
   std::string strFriendlyName;
   std::string strPortName;
 
-  HDEVINFO hDevInfo = INVALID_HANDLE_VALUE;
+//  HDEVINFO hDevInfo = INVALID_HANDLE_VALUE;
 
   // Return only devices that are currently present in a system
   // The GUID_DEVINTERFACE_COMPORT device interface class is defined for COM ports. GUID
   // {86E0D1E0-8089-11D0-9CE4-08003E301F73}
-  hDevInfo = SetupDiGetClassDevs(&GUID_DEVINTERFACE_COMPORT, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
+//  hDevInfo = SetupDiGetClassDevs(&GUID_DEVINTERFACE_COMPORT, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
 
-  if (INVALID_HANDLE_VALUE != hDevInfo)
+//  if (INVALID_HANDLE_VALUE != hDevInfo)
   {
-    SP_DEVINFO_DATA devInfoData;
+//    SP_DEVINFO_DATA devInfoData;
     // The caller must set DeviceInfoData.cbSize to sizeof(SP_DEVINFO_DATA)
-    devInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
+//    devInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
 
-    for (DWORD i = 0; SetupDiEnumDeviceInfo(hDevInfo, i, &devInfoData); i++)
+//    for (DWORD i = 0; SetupDiEnumDeviceInfo(hDevInfo, i, &devInfoData); i++)
     {
       // get port name
-      TCHAR portName[256];
-      HKEY hDevKey = SetupDiOpenDevRegKey(hDevInfo, &devInfoData, DICS_FLAG_GLOBAL, 0, DIREG_DEV, KEY_READ);
-      if (INVALID_HANDLE_VALUE != hDevKey)
+//      TCHAR portName[256];
+//      HKEY hDevKey = SetupDiOpenDevRegKey(hDevInfo, &devInfoData, DICS_FLAG_GLOBAL, 0, DIREG_DEV, KEY_READ);
+//      if (INVALID_HANDLE_VALUE != hDevKey)
       {
         DWORD dwCount = 255; // DEV_NAME_MAX_LEN
-        RegQueryValueEx(hDevKey, _T("PortName"), NULL, NULL, (BYTE*)portName, &dwCount);
-        RegCloseKey(hDevKey);
+//        RegQueryValueEx(hDevKey, _T("PortName"), NULL, NULL, (BYTE*)portName, &dwCount);
+//        RegCloseKey(hDevKey);
       }
 
       // get friendly name
-      TCHAR fname[256];
-      SetupDiGetDeviceRegistryProperty(hDevInfo, &devInfoData, SPDRP_FRIENDLYNAME, NULL, (PBYTE)fname,
-                                       sizeof(fname), NULL);
+//      TCHAR fname[256];
+//      SetupDiGetDeviceRegistryProperty(hDevInfo, &devInfoData, SPDRP_FRIENDLYNAME, NULL, (PBYTE)fname,
+//                                       sizeof(fname), NULL);
 
 #ifdef UNICODE
-      strPortName = wstringToString(portName);
-      strFriendlyName = wstringToString(fname);
+//      strPortName = wstringToString(portName);
+//      strFriendlyName = wstringToString(fname);
 #else
-      strPortName = std::string(portName);
-      strFriendlyName = std::string(fname);
+//      strPortName = std::string(portName);
+//      strFriendlyName = std::string(fname);
 #endif
       // remove (COMxx)
-      strFriendlyName = strFriendlyName.substr(0, strFriendlyName.find(("(COM")));
-      m_serialPortInfo.port_name = strPortName;
-      m_serialPortInfo.port_description = strFriendlyName;
-      portInfoList.push_back(m_serialPortInfo);
+//      strFriendlyName = strFriendlyName.substr(0, strFriendlyName.find(("(COM")));
+//      m_serialPortInfo.port_name = strPortName;
+//      m_serialPortInfo.port_description = strFriendlyName;
+//      portInfoList.push_back(m_serialPortInfo);
     }
 
-    if (ERROR_NO_MORE_ITEMS == GetLastError())
+//    if (ERROR_NO_MORE_ITEMS == GetLastError())
     {
       bRet = true; // no more item
     }
   }
-  SetupDiDestroyDeviceInfoList(hDevInfo);
+//  SetupDiDestroyDeviceInfoList(hDevInfo);
   return bRet;
 }
 
 bool QG_Uart::get_serialportinfos(std::vector<SerialPortInfo>& portInfoList)
 {
-  return enumDetailsSerialPorts(portInfoList);
+  return true; // enumDetailsSerialPorts(portInfoList);
 }
diff --git a/QGNSS_FW_UPG/QG_Common.cpp b/QGNSS_FW_UPG/QG_Common.cpp
index 8f59a16..224e372 100644
--- a/QGNSS_FW_UPG/QG_Common.cpp
+++ b/QGNSS_FW_UPG/QG_Common.cpp
@@ -63,10 +63,10 @@
  {
      std::size_t filesize = 0;
      FILE* fp = fopen(filename, /*"rb"*/mode);
-     if (fp == INVALID_HANDLE_VALUE)
-     {
-         return filesize;
-     }
+//     if (fp == INVALID_HANDLE_VALUE)
+//     {
+//        return filesize;
+//     }
      if (!fp) { filesize = 0; return filesize; }
      fseek(fp, 0L, SEEK_END);
      filesize = ftell(fp);
@@ -81,10 +81,10 @@
  {
      std::size_t readsize = 0;
      FILE* fp = fopen(filename, /*"rb"*/mode);
-     if (fp == INVALID_HANDLE_VALUE )
-     {
-         return readsize;
-     }
+//     if (fp == INVALID_HANDLE_VALUE )
+//     {
+//         return readsize;
+//     }
      data.resize(size);
      readsize= fread(data.data(), 1, size, fp);
      data= data.substr(0, readsize);
@@ -104,18 +104,18 @@
      return std::string();
    }
 
-   int size = WideCharToMultiByte(CP_ACP, 0, &wstr[0], (int)wstr.size(), NULL, 0, NULL, NULL);
+   int size; // = WideCharToMultiByte(CP_ACP, 0, &wstr[0], (int)wstr.size(), NULL, 0, NULL, NULL); JMF
    std::string ret = std::string(size, 0);
-   WideCharToMultiByte(CP_ACP, 0, &wstr[0], (int)wstr.size(), &ret[0], size, NULL, NULL); // CP_UTF8
+//   WideCharToMultiByte(CP_ACP, 0, &wstr[0], (int)wstr.size(), &ret[0], size, NULL, NULL); // CP_UTF8
    return ret;
  }
 
  std::wstring StringToWString(const std::string& str)
  {
-   int len = MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, NULL, 0);
+   int len; // = MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, NULL, 0); JMF
    wchar_t* wide = new wchar_t[len + 1];
-   memset(wide, '\0', sizeof(wchar_t) * (len + 1));
-   MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, wide, len);
+//   memset(wide, '\0', sizeof(wchar_t) * (len + 1));
+//   MultiByteToWideChar(CP_UTF8, 0, str.c_str(), -1, wide, len);  JMF
    std::wstring w_str(wide);
    delete[] wide;
    return w_str;
diff --git a/QGNSS_FW_UPG/crc32.cpp b/QGNSS_FW_UPG/crc32.cpp
index 110f5e8..355bcbf 100644
--- a/QGNSS_FW_UPG/crc32.cpp
+++ b/QGNSS_FW_UPG/crc32.cpp
@@ -108,7 +108,7 @@ unsigned int crc32_eval(unsigned int crc32val, const void *void_ptr, const unsig
     uint32_t word_data;
     unsigned char* byte_ptr = (unsigned char*)&word_data;
 
-  if (NULL == buf_ptr)
+//  if (NULL == buf_ptr)
   {
     return 0;
   }
diff --git a/QGNSS_FlashTool_UI/addsrc/ST/Widgets/st_pm_discardqt_ui.cpp b/QGNSS_FlashTool_UI/addsrc/ST/Widgets/st_pm_discardqt_ui.cpp
index 3a5fd08..3e59dda 100644
--- a/QGNSS_FlashTool_UI/addsrc/ST/Widgets/st_pm_discardqt_ui.cpp
+++ b/QGNSS_FlashTool_UI/addsrc/ST/Widgets/st_pm_discardqt_ui.cpp
@@ -1,5 +1,7 @@
 #include "st_pm_discardqt_ui.h"
 
+#define INVALID_HANDLE_VALUE ((void*)(long long)-1)
+
 using namespace std::placeholders;
 
 
